// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.DepartemenDataOnDemand;
import com.rpll.app.model.Dosen;
import com.rpll.app.model.DosenDataOnDemand;
import com.rpll.app.model.PegawaiDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DosenDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DosenDataOnDemand: @Component;
    
    private Random DosenDataOnDemand.rnd = new SecureRandom();
    
    private List<Dosen> DosenDataOnDemand.data;
    
    @Autowired
    private DepartemenDataOnDemand DosenDataOnDemand.departemenDataOnDemand;
    
    @Autowired
    private PegawaiDataOnDemand DosenDataOnDemand.pegawaiDataOnDemand;
    
    public Dosen DosenDataOnDemand.getNewTransientDosen(int index) {
        Dosen obj = new Dosen();
        setGelar(obj, index);
        setJenjangStudi(obj, index);
        setKodeAsal(obj, index);
        setKodeNegara(obj, index);
        setPassDosen(obj, index);
        setStatusDosen(obj, index);
        setTanggalIjazah(obj, index);
        return obj;
    }
    
    public void DosenDataOnDemand.setGelar(Dosen obj, int index) {
        String gelar = "gelar_" + index;
        if (gelar.length() > 40) {
            gelar = gelar.substring(0, 40);
        }
        obj.setGelar(gelar);
    }
    
    public void DosenDataOnDemand.setJenjangStudi(Dosen obj, int index) {
        String jenjangStudi = "jenjangStudi_" + index;
        if (jenjangStudi.length() > 40) {
            jenjangStudi = jenjangStudi.substring(0, 40);
        }
        obj.setJenjangStudi(jenjangStudi);
    }
    
    public void DosenDataOnDemand.setKodeAsal(Dosen obj, int index) {
        String kodeAsal = "kodeAsal_" + index;
        if (kodeAsal.length() > 20) {
            kodeAsal = kodeAsal.substring(0, 20);
        }
        obj.setKodeAsal(kodeAsal);
    }
    
    public void DosenDataOnDemand.setKodeNegara(Dosen obj, int index) {
        String kodeNegara = "kodeNegara_" + index;
        if (kodeNegara.length() > 20) {
            kodeNegara = kodeNegara.substring(0, 20);
        }
        obj.setKodeNegara(kodeNegara);
    }
    
    public void DosenDataOnDemand.setPassDosen(Dosen obj, int index) {
        String passDosen = "passDosen_" + index;
        if (passDosen.length() > 20) {
            passDosen = passDosen.substring(0, 20);
        }
        obj.setPassDosen(passDosen);
    }
    
    public void DosenDataOnDemand.setStatusDosen(Dosen obj, int index) {
        String statusDosen = "statusDosen_" + index;
        if (statusDosen.length() > 40) {
            statusDosen = statusDosen.substring(0, 40);
        }
        obj.setStatusDosen(statusDosen);
    }
    
    public void DosenDataOnDemand.setTanggalIjazah(Dosen obj, int index) {
        String tanggalIjazah = "tanggalIjazah_" + index;
        if (tanggalIjazah.length() > 40) {
            tanggalIjazah = tanggalIjazah.substring(0, 40);
        }
        obj.setTanggalIjazah(tanggalIjazah);
    }
    
    public Dosen DosenDataOnDemand.getSpecificDosen(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Dosen obj = data.get(index);
        String id = obj.getNip();
        return Dosen.findDosen(id);
    }
    
    public Dosen DosenDataOnDemand.getRandomDosen() {
        init();
        Dosen obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getNip();
        return Dosen.findDosen(id);
    }
    
    public boolean DosenDataOnDemand.modifyDosen(Dosen obj) {
        return false;
    }
    
    public void DosenDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Dosen.findDosenEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Dosen' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Dosen>();
        for (int i = 0; i < 10; i++) {
            Dosen obj = getNewTransientDosen(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
