// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.Periode;
import com.rpll.app.model.PeriodeDataOnDemand;
import com.rpll.app.model.PeriodeIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PeriodeIntegrationTest_Roo_IntegrationTest {
    
    declare @type: PeriodeIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: PeriodeIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: PeriodeIntegrationTest: @Transactional;
    
    @Autowired
    private PeriodeDataOnDemand PeriodeIntegrationTest.dod;
    
    @Test
    public void PeriodeIntegrationTest.testCountPeriodes() {
        Assert.assertNotNull("Data on demand for 'Periode' failed to initialize correctly", dod.getRandomPeriode());
        long count = Periode.countPeriodes();
        Assert.assertTrue("Counter for 'Periode' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void PeriodeIntegrationTest.testFindPeriode() {
        Periode obj = dod.getRandomPeriode();
        Assert.assertNotNull("Data on demand for 'Periode' failed to initialize correctly", obj);
        String id = obj.getKodePeriode();
        Assert.assertNotNull("Data on demand for 'Periode' failed to provide an identifier", id);
        obj = Periode.findPeriode(id);
        Assert.assertNotNull("Find method for 'Periode' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Periode' returned the incorrect identifier", id, obj.getKodePeriode());
    }
    
    @Test
    public void PeriodeIntegrationTest.testFindAllPeriodes() {
        Assert.assertNotNull("Data on demand for 'Periode' failed to initialize correctly", dod.getRandomPeriode());
        long count = Periode.countPeriodes();
        Assert.assertTrue("Too expensive to perform a find all test for 'Periode', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Periode> result = Periode.findAllPeriodes();
        Assert.assertNotNull("Find all method for 'Periode' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Periode' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void PeriodeIntegrationTest.testFindPeriodeEntries() {
        Assert.assertNotNull("Data on demand for 'Periode' failed to initialize correctly", dod.getRandomPeriode());
        long count = Periode.countPeriodes();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Periode> result = Periode.findPeriodeEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Periode' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Periode' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void PeriodeIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'Periode' failed to initialize correctly", dod.getRandomPeriode());
        Periode obj = dod.getNewTransientPeriode(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Periode' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Periode' identifier to be null", obj.getKodePeriode());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'Periode' identifier to no longer be null", obj.getKodePeriode());
    }
    
    @Test
    public void PeriodeIntegrationTest.testRemove() {
        Periode obj = dod.getRandomPeriode();
        Assert.assertNotNull("Data on demand for 'Periode' failed to initialize correctly", obj);
        String id = obj.getKodePeriode();
        Assert.assertNotNull("Data on demand for 'Periode' failed to provide an identifier", id);
        obj = Periode.findPeriode(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Periode' with identifier '" + id + "'", Periode.findPeriode(id));
    }
    
}
