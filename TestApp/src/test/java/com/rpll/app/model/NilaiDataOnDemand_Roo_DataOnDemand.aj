// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.MahasiswaDataOnDemand;
import com.rpll.app.model.MataKuliahDataOnDemand;
import com.rpll.app.model.Nilai;
import com.rpll.app.model.NilaiDataOnDemand;
import com.rpll.app.model.NilaiPK;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect NilaiDataOnDemand_Roo_DataOnDemand {
    
    declare @type: NilaiDataOnDemand: @Component;
    
    private Random NilaiDataOnDemand.rnd = new SecureRandom();
    
    private List<Nilai> NilaiDataOnDemand.data;
    
    @Autowired
    private MataKuliahDataOnDemand NilaiDataOnDemand.mataKuliahDataOnDemand;
    
    @Autowired
    private MahasiswaDataOnDemand NilaiDataOnDemand.mahasiswaDataOnDemand;
    
    public Nilai NilaiDataOnDemand.getNewTransientNilai(int index) {
        Nilai obj = new Nilai();
        setEmbeddedIdClass(obj, index);
        setIndeks(obj, index);
        setNilai1(obj, index);
        setNilai2(obj, index);
        setNilai3(obj, index);
        setNilai4(obj, index);
        setNilai5(obj, index);
        setSemester(obj, index);
        setUas(obj, index);
        return obj;
    }
    
    public void NilaiDataOnDemand.setEmbeddedIdClass(Nilai obj, int index) {
        String nim = "nim_" + index;
        if (nim.length() > 20) {
            nim = new Random().nextInt(10) + nim.substring(1, 20);
        }
        String kodeMatkul = "kodeMatkul_" + index;
        if (kodeMatkul.length() > 20) {
            kodeMatkul = new Random().nextInt(10) + kodeMatkul.substring(1, 20);
        }
        
        NilaiPK embeddedIdClass = new NilaiPK(nim, kodeMatkul);
        obj.setId(embeddedIdClass);
    }
    
    public void NilaiDataOnDemand.setIndeks(Nilai obj, int index) {
        String indeks = "indeks_" + index;
        if (indeks.length() > 20) {
            indeks = indeks.substring(0, 20);
        }
        obj.setIndeks(indeks);
    }
    
    public void NilaiDataOnDemand.setNilai1(Nilai obj, int index) {
        Integer nilai1 = new Integer(index);
        obj.setNilai1(nilai1);
    }
    
    public void NilaiDataOnDemand.setNilai2(Nilai obj, int index) {
        Integer nilai2 = new Integer(index);
        obj.setNilai2(nilai2);
    }
    
    public void NilaiDataOnDemand.setNilai3(Nilai obj, int index) {
        Integer nilai3 = new Integer(index);
        obj.setNilai3(nilai3);
    }
    
    public void NilaiDataOnDemand.setNilai4(Nilai obj, int index) {
        Integer nilai4 = new Integer(index);
        obj.setNilai4(nilai4);
    }
    
    public void NilaiDataOnDemand.setNilai5(Nilai obj, int index) {
        Integer nilai5 = new Integer(index);
        obj.setNilai5(nilai5);
    }
    
    public void NilaiDataOnDemand.setSemester(Nilai obj, int index) {
        String semester = "semester_" + index;
        if (semester.length() > 20) {
            semester = semester.substring(0, 20);
        }
        obj.setSemester(semester);
    }
    
    public void NilaiDataOnDemand.setUas(Nilai obj, int index) {
        Integer uas = new Integer(index);
        obj.setUas(uas);
    }
    
    public Nilai NilaiDataOnDemand.getSpecificNilai(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Nilai obj = data.get(index);
        NilaiPK id = obj.getId();
        return Nilai.findNilai(id);
    }
    
    public Nilai NilaiDataOnDemand.getRandomNilai() {
        init();
        Nilai obj = data.get(rnd.nextInt(data.size()));
        NilaiPK id = obj.getId();
        return Nilai.findNilai(id);
    }
    
    public boolean NilaiDataOnDemand.modifyNilai(Nilai obj) {
        return false;
    }
    
    public void NilaiDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Nilai.findNilaiEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Nilai' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Nilai>();
        for (int i = 0; i < 10; i++) {
            Nilai obj = getNewTransientNilai(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
