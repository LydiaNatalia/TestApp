// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.MataKuliahDataOnDemand;
import com.rpll.app.model.PegawaiDataOnDemand;
import com.rpll.app.model.TanggungJawab;
import com.rpll.app.model.TanggungJawabDataOnDemand;
import com.rpll.app.model.TanggungJawabPK;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TanggungJawabDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TanggungJawabDataOnDemand: @Component;
    
    private Random TanggungJawabDataOnDemand.rnd = new SecureRandom();
    
    private List<TanggungJawab> TanggungJawabDataOnDemand.data;
    
    @Autowired
    private MataKuliahDataOnDemand TanggungJawabDataOnDemand.mataKuliahDataOnDemand;
    
    @Autowired
    private PegawaiDataOnDemand TanggungJawabDataOnDemand.pegawaiDataOnDemand;
    
    public TanggungJawab TanggungJawabDataOnDemand.getNewTransientTanggungJawab(int index) {
        TanggungJawab obj = new TanggungJawab();
        setEmbeddedIdClass(obj, index);
        return obj;
    }
    
    public void TanggungJawabDataOnDemand.setEmbeddedIdClass(TanggungJawab obj, int index) {
        String nip = "nip_" + index;
        if (nip.length() > 20) {
            nip = new Random().nextInt(10) + nip.substring(1, 20);
        }
        String kodeMatkul = "kodeMatkul_" + index;
        if (kodeMatkul.length() > 20) {
            kodeMatkul = new Random().nextInt(10) + kodeMatkul.substring(1, 20);
        }
        
        TanggungJawabPK embeddedIdClass = new TanggungJawabPK(nip, kodeMatkul);
        obj.setId(embeddedIdClass);
    }
    
    public TanggungJawab TanggungJawabDataOnDemand.getSpecificTanggungJawab(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TanggungJawab obj = data.get(index);
        TanggungJawabPK id = obj.getId();
        return TanggungJawab.findTanggungJawab(id);
    }
    
    public TanggungJawab TanggungJawabDataOnDemand.getRandomTanggungJawab() {
        init();
        TanggungJawab obj = data.get(rnd.nextInt(data.size()));
        TanggungJawabPK id = obj.getId();
        return TanggungJawab.findTanggungJawab(id);
    }
    
    public boolean TanggungJawabDataOnDemand.modifyTanggungJawab(TanggungJawab obj) {
        return false;
    }
    
    public void TanggungJawabDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = TanggungJawab.findTanggungJawabEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TanggungJawab' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TanggungJawab>();
        for (int i = 0; i < 10; i++) {
            TanggungJawab obj = getNewTransientTanggungJawab(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
