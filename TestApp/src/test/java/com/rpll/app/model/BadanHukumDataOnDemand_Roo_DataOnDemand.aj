// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.BadanHukum;
import com.rpll.app.model.BadanHukumDataOnDemand;
import com.rpll.app.model.FasilitasDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BadanHukumDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BadanHukumDataOnDemand: @Component;
    
    private Random BadanHukumDataOnDemand.rnd = new SecureRandom();
    
    private List<BadanHukum> BadanHukumDataOnDemand.data;
    
    @Autowired
    private FasilitasDataOnDemand BadanHukumDataOnDemand.fasilitasDataOnDemand;
    
    public BadanHukum BadanHukumDataOnDemand.getNewTransientBadanHukum(int index) {
        BadanHukum obj = new BadanHukum();
        setAlamat(obj, index);
        setEmail(obj, index);
        setFaks(obj, index);
        setHomepage(obj, index);
        setKodePos(obj, index);
        setKota(obj, index);
        setNamaBhukum(obj, index);
        setNomorAkta(obj, index);
        setNomorPengesahan(obj, index);
        setTanggalAkta(obj, index);
        setTanggalBerdiri(obj, index);
        setTanggalPengesahan(obj, index);
        setTelepon(obj, index);
        return obj;
    }
    
    public void BadanHukumDataOnDemand.setAlamat(BadanHukum obj, int index) {
        String alamat = "alamat_" + index;
        if (alamat.length() > 40) {
            alamat = alamat.substring(0, 40);
        }
        obj.setAlamat(alamat);
    }
    
    public void BadanHukumDataOnDemand.setEmail(BadanHukum obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 40) {
            email = email.substring(0, 40);
        }
        obj.setEmail(email);
    }
    
    public void BadanHukumDataOnDemand.setFaks(BadanHukum obj, int index) {
        String faks = "faks_" + index;
        if (faks.length() > 20) {
            faks = faks.substring(0, 20);
        }
        obj.setFaks(faks);
    }
    
    public void BadanHukumDataOnDemand.setHomepage(BadanHukum obj, int index) {
        String homepage = "homepage_" + index;
        if (homepage.length() > 40) {
            homepage = homepage.substring(0, 40);
        }
        obj.setHomepage(homepage);
    }
    
    public void BadanHukumDataOnDemand.setKodePos(BadanHukum obj, int index) {
        String kodePos = "kodePos_" + index;
        if (kodePos.length() > 20) {
            kodePos = kodePos.substring(0, 20);
        }
        obj.setKodePos(kodePos);
    }
    
    public void BadanHukumDataOnDemand.setKota(BadanHukum obj, int index) {
        String kota = "kota_" + index;
        if (kota.length() > 40) {
            kota = kota.substring(0, 40);
        }
        obj.setKota(kota);
    }
    
    public void BadanHukumDataOnDemand.setNamaBhukum(BadanHukum obj, int index) {
        String namaBhukum = "namaBhukum_" + index;
        if (namaBhukum.length() > 40) {
            namaBhukum = namaBhukum.substring(0, 40);
        }
        obj.setNamaBhukum(namaBhukum);
    }
    
    public void BadanHukumDataOnDemand.setNomorAkta(BadanHukum obj, int index) {
        String nomorAkta = "nomorAkta_" + index;
        if (nomorAkta.length() > 40) {
            nomorAkta = nomorAkta.substring(0, 40);
        }
        obj.setNomorAkta(nomorAkta);
    }
    
    public void BadanHukumDataOnDemand.setNomorPengesahan(BadanHukum obj, int index) {
        String nomorPengesahan = "nomorPengesahan_" + index;
        if (nomorPengesahan.length() > 20) {
            nomorPengesahan = nomorPengesahan.substring(0, 20);
        }
        obj.setNomorPengesahan(nomorPengesahan);
    }
    
    public void BadanHukumDataOnDemand.setTanggalAkta(BadanHukum obj, int index) {
        String tanggalAkta = "tanggalAkta_" + index;
        if (tanggalAkta.length() > 40) {
            tanggalAkta = tanggalAkta.substring(0, 40);
        }
        obj.setTanggalAkta(tanggalAkta);
    }
    
    public void BadanHukumDataOnDemand.setTanggalBerdiri(BadanHukum obj, int index) {
        String tanggalBerdiri = "tanggalBerdiri_" + index;
        if (tanggalBerdiri.length() > 40) {
            tanggalBerdiri = tanggalBerdiri.substring(0, 40);
        }
        obj.setTanggalBerdiri(tanggalBerdiri);
    }
    
    public void BadanHukumDataOnDemand.setTanggalPengesahan(BadanHukum obj, int index) {
        String tanggalPengesahan = "tanggalPengesahan_" + index;
        if (tanggalPengesahan.length() > 40) {
            tanggalPengesahan = tanggalPengesahan.substring(0, 40);
        }
        obj.setTanggalPengesahan(tanggalPengesahan);
    }
    
    public void BadanHukumDataOnDemand.setTelepon(BadanHukum obj, int index) {
        String telepon = "telepon_" + index;
        if (telepon.length() > 20) {
            telepon = telepon.substring(0, 20);
        }
        obj.setTelepon(telepon);
    }
    
    public BadanHukum BadanHukumDataOnDemand.getSpecificBadanHukum(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        BadanHukum obj = data.get(index);
        String id = obj.getKodeBhukum();
        return BadanHukum.findBadanHukum(id);
    }
    
    public BadanHukum BadanHukumDataOnDemand.getRandomBadanHukum() {
        init();
        BadanHukum obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getKodeBhukum();
        return BadanHukum.findBadanHukum(id);
    }
    
    public boolean BadanHukumDataOnDemand.modifyBadanHukum(BadanHukum obj) {
        return false;
    }
    
    public void BadanHukumDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = BadanHukum.findBadanHukumEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'BadanHukum' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<BadanHukum>();
        for (int i = 0; i < 10; i++) {
            BadanHukum obj = getNewTransientBadanHukum(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
