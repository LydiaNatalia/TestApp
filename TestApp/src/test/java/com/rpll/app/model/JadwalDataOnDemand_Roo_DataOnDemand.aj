// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.Jadwal;
import com.rpll.app.model.JadwalDataOnDemand;
import com.rpll.app.model.JadwalPK;
import com.rpll.app.model.KelasDataOnDemand;
import com.rpll.app.model.MataKuliahDataOnDemand;
import com.rpll.app.model.PegawaiDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect JadwalDataOnDemand_Roo_DataOnDemand {
    
    declare @type: JadwalDataOnDemand: @Component;
    
    private Random JadwalDataOnDemand.rnd = new SecureRandom();
    
    private List<Jadwal> JadwalDataOnDemand.data;
    
    @Autowired
    private KelasDataOnDemand JadwalDataOnDemand.kelasDataOnDemand;
    
    @Autowired
    private MataKuliahDataOnDemand JadwalDataOnDemand.mataKuliahDataOnDemand;
    
    @Autowired
    private PegawaiDataOnDemand JadwalDataOnDemand.pegawaiDataOnDemand;
    
    public Jadwal JadwalDataOnDemand.getNewTransientJadwal(int index) {
        Jadwal obj = new Jadwal();
        setEmbeddedIdClass(obj, index);
        return obj;
    }
    
    public void JadwalDataOnDemand.setEmbeddedIdClass(Jadwal obj, int index) {
        String kodeKelas = "kodeKelas_" + index;
        if (kodeKelas.length() > 20) {
            kodeKelas = new Random().nextInt(10) + kodeKelas.substring(1, 20);
        }
        String nip = "nip_" + index;
        if (nip.length() > 20) {
            nip = new Random().nextInt(10) + nip.substring(1, 20);
        }
        String kodeMatkul = "kodeMatkul_" + index;
        if (kodeMatkul.length() > 20) {
            kodeMatkul = new Random().nextInt(10) + kodeMatkul.substring(1, 20);
        }
        
        JadwalPK embeddedIdClass = new JadwalPK(kodeKelas, nip, kodeMatkul);
        obj.setId(embeddedIdClass);
    }
    
    public Jadwal JadwalDataOnDemand.getSpecificJadwal(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Jadwal obj = data.get(index);
        JadwalPK id = obj.getId();
        return Jadwal.findJadwal(id);
    }
    
    public Jadwal JadwalDataOnDemand.getRandomJadwal() {
        init();
        Jadwal obj = data.get(rnd.nextInt(data.size()));
        JadwalPK id = obj.getId();
        return Jadwal.findJadwal(id);
    }
    
    public boolean JadwalDataOnDemand.modifyJadwal(Jadwal obj) {
        return false;
    }
    
    public void JadwalDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Jadwal.findJadwalEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Jadwal' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Jadwal>();
        for (int i = 0; i < 10; i++) {
            Jadwal obj = getNewTransientJadwal(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
