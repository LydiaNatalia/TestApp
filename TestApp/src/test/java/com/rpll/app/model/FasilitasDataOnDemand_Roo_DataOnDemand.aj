// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.Fasilitas;
import com.rpll.app.model.FasilitasDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect FasilitasDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FasilitasDataOnDemand: @Component;
    
    private Random FasilitasDataOnDemand.rnd = new SecureRandom();
    
    private List<Fasilitas> FasilitasDataOnDemand.data;
    
    public Fasilitas FasilitasDataOnDemand.getNewTransientFasilitas(int index) {
        Fasilitas obj = new Fasilitas();
        setJumlahRkuliah(obj, index);
        setJumlahRlab(obj, index);
        setLuasLahan(obj, index);
        setLuasRdmin(obj, index);
        setLuasRdosen(obj, index);
        setLuasRkuliah(obj, index);
        setLuasRlab(obj, index);
        setLuasTanah(obj, index);
        return obj;
    }
    
    public void FasilitasDataOnDemand.setJumlahRkuliah(Fasilitas obj, int index) {
        Integer jumlahRkuliah = new Integer(index);
        obj.setJumlahRkuliah(jumlahRkuliah);
    }
    
    public void FasilitasDataOnDemand.setJumlahRlab(Fasilitas obj, int index) {
        Integer jumlahRlab = new Integer(index);
        obj.setJumlahRlab(jumlahRlab);
    }
    
    public void FasilitasDataOnDemand.setLuasLahan(Fasilitas obj, int index) {
        Integer luasLahan = new Integer(index);
        obj.setLuasLahan(luasLahan);
    }
    
    public void FasilitasDataOnDemand.setLuasRdmin(Fasilitas obj, int index) {
        Integer luasRdmin = new Integer(index);
        obj.setLuasRdmin(luasRdmin);
    }
    
    public void FasilitasDataOnDemand.setLuasRdosen(Fasilitas obj, int index) {
        Integer luasRdosen = new Integer(index);
        obj.setLuasRdosen(luasRdosen);
    }
    
    public void FasilitasDataOnDemand.setLuasRkuliah(Fasilitas obj, int index) {
        Integer luasRkuliah = new Integer(index);
        obj.setLuasRkuliah(luasRkuliah);
    }
    
    public void FasilitasDataOnDemand.setLuasRlab(Fasilitas obj, int index) {
        Integer luasRlab = new Integer(index);
        obj.setLuasRlab(luasRlab);
    }
    
    public void FasilitasDataOnDemand.setLuasTanah(Fasilitas obj, int index) {
        Integer luasTanah = new Integer(index);
        obj.setLuasTanah(luasTanah);
    }
    
    public Fasilitas FasilitasDataOnDemand.getSpecificFasilitas(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Fasilitas obj = data.get(index);
        String id = obj.getKodeFasilitas();
        return Fasilitas.findFasilitas(id);
    }
    
    public Fasilitas FasilitasDataOnDemand.getRandomFasilitas() {
        init();
        Fasilitas obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getKodeFasilitas();
        return Fasilitas.findFasilitas(id);
    }
    
    public boolean FasilitasDataOnDemand.modifyFasilitas(Fasilitas obj) {
        return false;
    }
    
    public void FasilitasDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Fasilitas.findFasilitasEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Fasilitas' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Fasilitas>();
        for (int i = 0; i < 10; i++) {
            Fasilitas obj = getNewTransientFasilitas(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
