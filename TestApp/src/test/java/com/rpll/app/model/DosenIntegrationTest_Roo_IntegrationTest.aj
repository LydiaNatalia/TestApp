// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.Dosen;
import com.rpll.app.model.DosenDataOnDemand;
import com.rpll.app.model.DosenIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DosenIntegrationTest_Roo_IntegrationTest {
    
    declare @type: DosenIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: DosenIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: DosenIntegrationTest: @Transactional;
    
    @Autowired
    private DosenDataOnDemand DosenIntegrationTest.dod;
    
    @Test
    public void DosenIntegrationTest.testCountDosens() {
        Assert.assertNotNull("Data on demand for 'Dosen' failed to initialize correctly", dod.getRandomDosen());
        long count = Dosen.countDosens();
        Assert.assertTrue("Counter for 'Dosen' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void DosenIntegrationTest.testFindDosen() {
        Dosen obj = dod.getRandomDosen();
        Assert.assertNotNull("Data on demand for 'Dosen' failed to initialize correctly", obj);
        String id = obj.getNip();
        Assert.assertNotNull("Data on demand for 'Dosen' failed to provide an identifier", id);
        obj = Dosen.findDosen(id);
        Assert.assertNotNull("Find method for 'Dosen' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Dosen' returned the incorrect identifier", id, obj.getNip());
    }
    
    @Test
    public void DosenIntegrationTest.testFindAllDosens() {
        Assert.assertNotNull("Data on demand for 'Dosen' failed to initialize correctly", dod.getRandomDosen());
        long count = Dosen.countDosens();
        Assert.assertTrue("Too expensive to perform a find all test for 'Dosen', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Dosen> result = Dosen.findAllDosens();
        Assert.assertNotNull("Find all method for 'Dosen' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Dosen' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void DosenIntegrationTest.testFindDosenEntries() {
        Assert.assertNotNull("Data on demand for 'Dosen' failed to initialize correctly", dod.getRandomDosen());
        long count = Dosen.countDosens();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Dosen> result = Dosen.findDosenEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Dosen' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Dosen' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void DosenIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'Dosen' failed to initialize correctly", dod.getRandomDosen());
        Dosen obj = dod.getNewTransientDosen(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Dosen' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Dosen' identifier to be null", obj.getNip());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'Dosen' identifier to no longer be null", obj.getNip());
    }
    
    @Test
    public void DosenIntegrationTest.testRemove() {
        Dosen obj = dod.getRandomDosen();
        Assert.assertNotNull("Data on demand for 'Dosen' failed to initialize correctly", obj);
        String id = obj.getNip();
        Assert.assertNotNull("Data on demand for 'Dosen' failed to provide an identifier", id);
        obj = Dosen.findDosen(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Dosen' with identifier '" + id + "'", Dosen.findDosen(id));
    }
    
}
