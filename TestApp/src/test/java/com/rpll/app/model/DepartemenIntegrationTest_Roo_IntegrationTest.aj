// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.Departemen;
import com.rpll.app.model.DepartemenDataOnDemand;
import com.rpll.app.model.DepartemenIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DepartemenIntegrationTest_Roo_IntegrationTest {
    
    declare @type: DepartemenIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: DepartemenIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: DepartemenIntegrationTest: @Transactional;
    
    @Autowired
    private DepartemenDataOnDemand DepartemenIntegrationTest.dod;
    
    @Test
    public void DepartemenIntegrationTest.testCountDepartemens() {
        Assert.assertNotNull("Data on demand for 'Departemen' failed to initialize correctly", dod.getRandomDepartemen());
        long count = Departemen.countDepartemens();
        Assert.assertTrue("Counter for 'Departemen' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void DepartemenIntegrationTest.testFindDepartemen() {
        Departemen obj = dod.getRandomDepartemen();
        Assert.assertNotNull("Data on demand for 'Departemen' failed to initialize correctly", obj);
        String id = obj.getKodeDepart();
        Assert.assertNotNull("Data on demand for 'Departemen' failed to provide an identifier", id);
        obj = Departemen.findDepartemen(id);
        Assert.assertNotNull("Find method for 'Departemen' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Departemen' returned the incorrect identifier", id, obj.getKodeDepart());
    }
    
    @Test
    public void DepartemenIntegrationTest.testFindAllDepartemens() {
        Assert.assertNotNull("Data on demand for 'Departemen' failed to initialize correctly", dod.getRandomDepartemen());
        long count = Departemen.countDepartemens();
        Assert.assertTrue("Too expensive to perform a find all test for 'Departemen', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Departemen> result = Departemen.findAllDepartemens();
        Assert.assertNotNull("Find all method for 'Departemen' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Departemen' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void DepartemenIntegrationTest.testFindDepartemenEntries() {
        Assert.assertNotNull("Data on demand for 'Departemen' failed to initialize correctly", dod.getRandomDepartemen());
        long count = Departemen.countDepartemens();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Departemen> result = Departemen.findDepartemenEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Departemen' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Departemen' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void DepartemenIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'Departemen' failed to initialize correctly", dod.getRandomDepartemen());
        Departemen obj = dod.getNewTransientDepartemen(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Departemen' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Departemen' identifier to be null", obj.getKodeDepart());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'Departemen' identifier to no longer be null", obj.getKodeDepart());
    }
    
    @Test
    public void DepartemenIntegrationTest.testRemove() {
        Departemen obj = dod.getRandomDepartemen();
        Assert.assertNotNull("Data on demand for 'Departemen' failed to initialize correctly", obj);
        String id = obj.getKodeDepart();
        Assert.assertNotNull("Data on demand for 'Departemen' failed to provide an identifier", id);
        obj = Departemen.findDepartemen(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Departemen' with identifier '" + id + "'", Departemen.findDepartemen(id));
    }
    
}
