// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.DepartemenDataOnDemand;
import com.rpll.app.model.Periode;
import com.rpll.app.model.PeriodeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PeriodeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PeriodeDataOnDemand: @Component;
    
    private Random PeriodeDataOnDemand.rnd = new SecureRandom();
    
    private List<Periode> PeriodeDataOnDemand.data;
    
    @Autowired
    private DepartemenDataOnDemand PeriodeDataOnDemand.departemenDataOnDemand;
    
    public Periode PeriodeDataOnDemand.getNewTransientPeriode(int index) {
        Periode obj = new Periode();
        setAkhir(obj, index);
        setAwal(obj, index);
        setNamaPeriode(obj, index);
        return obj;
    }
    
    public void PeriodeDataOnDemand.setAkhir(Periode obj, int index) {
        String akhir = "akhir_" + index;
        if (akhir.length() > 40) {
            akhir = akhir.substring(0, 40);
        }
        obj.setAkhir(akhir);
    }
    
    public void PeriodeDataOnDemand.setAwal(Periode obj, int index) {
        String awal = "awal_" + index;
        if (awal.length() > 40) {
            awal = awal.substring(0, 40);
        }
        obj.setAwal(awal);
    }
    
    public void PeriodeDataOnDemand.setNamaPeriode(Periode obj, int index) {
        String namaPeriode = "namaPeriode_" + index;
        if (namaPeriode.length() > 40) {
            namaPeriode = namaPeriode.substring(0, 40);
        }
        obj.setNamaPeriode(namaPeriode);
    }
    
    public Periode PeriodeDataOnDemand.getSpecificPeriode(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Periode obj = data.get(index);
        String id = obj.getKodePeriode();
        return Periode.findPeriode(id);
    }
    
    public Periode PeriodeDataOnDemand.getRandomPeriode() {
        init();
        Periode obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getKodePeriode();
        return Periode.findPeriode(id);
    }
    
    public boolean PeriodeDataOnDemand.modifyPeriode(Periode obj) {
        return false;
    }
    
    public void PeriodeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Periode.findPeriodeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Periode' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Periode>();
        for (int i = 0; i < 10; i++) {
            Periode obj = getNewTransientPeriode(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
