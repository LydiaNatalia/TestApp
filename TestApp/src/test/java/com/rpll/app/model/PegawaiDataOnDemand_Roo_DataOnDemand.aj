// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.DosenDataOnDemand;
import com.rpll.app.model.Pegawai;
import com.rpll.app.model.PegawaiDataOnDemand;
import com.rpll.app.model.StaffDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PegawaiDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PegawaiDataOnDemand: @Component;
    
    private Random PegawaiDataOnDemand.rnd = new SecureRandom();
    
    private List<Pegawai> PegawaiDataOnDemand.data;
    
    @Autowired
    private DosenDataOnDemand PegawaiDataOnDemand.dosenDataOnDemand;
    
    @Autowired
    private StaffDataOnDemand PegawaiDataOnDemand.staffDataOnDemand;
    
    public Pegawai PegawaiDataOnDemand.getNewTransientPegawai(int index) {
        Pegawai obj = new Pegawai();
        setNamaPegawai(obj, index);
        return obj;
    }
    
    public void PegawaiDataOnDemand.setNamaPegawai(Pegawai obj, int index) {
        String namaPegawai = "namaPegawai_" + index;
        if (namaPegawai.length() > 40) {
            namaPegawai = namaPegawai.substring(0, 40);
        }
        obj.setNamaPegawai(namaPegawai);
    }
    
    public Pegawai PegawaiDataOnDemand.getSpecificPegawai(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Pegawai obj = data.get(index);
        String id = obj.getNip();
        return Pegawai.findPegawai(id);
    }
    
    public Pegawai PegawaiDataOnDemand.getRandomPegawai() {
        init();
        Pegawai obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getNip();
        return Pegawai.findPegawai(id);
    }
    
    public boolean PegawaiDataOnDemand.modifyPegawai(Pegawai obj) {
        return false;
    }
    
    public void PegawaiDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Pegawai.findPegawaiEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Pegawai' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Pegawai>();
        for (int i = 0; i < 10; i++) {
            Pegawai obj = getNewTransientPegawai(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
