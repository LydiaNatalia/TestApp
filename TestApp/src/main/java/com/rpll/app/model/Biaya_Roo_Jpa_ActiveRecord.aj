// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.Biaya;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Biaya_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Biaya.entityManager;
    
    public static final EntityManager Biaya.entityManager() {
        EntityManager em = new Biaya().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Biaya.countBiayas() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Biaya o", Long.class).getSingleResult();
    }
    
    public static List<Biaya> Biaya.findAllBiayas() {
        return entityManager().createQuery("SELECT o FROM Biaya o", Biaya.class).getResultList();
    }
    
    public static Biaya Biaya.findBiaya(String kodeBiaya) {
        if (kodeBiaya == null || kodeBiaya.length() == 0) return null;
        return entityManager().find(Biaya.class, kodeBiaya);
    }
    
    public static List<Biaya> Biaya.findBiayaEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Biaya o", Biaya.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Biaya.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Biaya.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Biaya attached = Biaya.findBiaya(this.kodeBiaya);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Biaya.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Biaya.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Biaya Biaya.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Biaya merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
