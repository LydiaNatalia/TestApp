// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.model;

import com.rpll.app.model.MataKuliah;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MataKuliah_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager MataKuliah.entityManager;
    
    public static final EntityManager MataKuliah.entityManager() {
        EntityManager em = new MataKuliah().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MataKuliah.countMataKuliahs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM MataKuliah o", Long.class).getSingleResult();
    }
    
    public static List<MataKuliah> MataKuliah.findAllMataKuliahs() {
        return entityManager().createQuery("SELECT o FROM MataKuliah o", MataKuliah.class).getResultList();
    }
    
    public static MataKuliah MataKuliah.findMataKuliah(String kodeMatkul) {
        if (kodeMatkul == null || kodeMatkul.length() == 0) return null;
        return entityManager().find(MataKuliah.class, kodeMatkul);
    }
    
    public static List<MataKuliah> MataKuliah.findMataKuliahEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MataKuliah o", MataKuliah.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void MataKuliah.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MataKuliah.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MataKuliah attached = MataKuliah.findMataKuliah(this.kodeMatkul);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MataKuliah.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MataKuliah.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MataKuliah MataKuliah.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MataKuliah merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
