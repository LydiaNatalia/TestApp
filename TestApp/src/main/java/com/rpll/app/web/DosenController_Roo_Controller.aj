// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rpll.app.web;

import com.rpll.app.model.Departemen;
import com.rpll.app.model.Dosen;
import com.rpll.app.model.Pegawai;
import com.rpll.app.web.DosenController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DosenController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DosenController.create(@Valid Dosen dosen, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, dosen);
            return "dosens/create";
        }
        uiModel.asMap().clear();
        dosen.persist();
        return "redirect:/dosens/" + encodeUrlPathSegment(dosen.getNip().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DosenController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Dosen());
        return "dosens/create";
    }
    
    @RequestMapping(value = "/{nip}", produces = "text/html")
    public String DosenController.show(@PathVariable("nip") String nip, Model uiModel) {
        uiModel.addAttribute("dosen", Dosen.findDosen(nip));
        uiModel.addAttribute("itemId", nip);
        return "dosens/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DosenController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("dosens", Dosen.findDosenEntries(firstResult, sizeNo));
            float nrOfPages = (float) Dosen.countDosens() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("dosens", Dosen.findAllDosens());
        }
        return "dosens/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DosenController.update(@Valid Dosen dosen, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, dosen);
            return "dosens/update";
        }
        uiModel.asMap().clear();
        dosen.merge();
        return "redirect:/dosens/" + encodeUrlPathSegment(dosen.getNip().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{nip}", params = "form", produces = "text/html")
    public String DosenController.updateForm(@PathVariable("nip") String nip, Model uiModel) {
        populateEditForm(uiModel, Dosen.findDosen(nip));
        return "dosens/update";
    }
    
    @RequestMapping(value = "/{nip}", method = RequestMethod.DELETE, produces = "text/html")
    public String DosenController.delete(@PathVariable("nip") String nip, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Dosen dosen = Dosen.findDosen(nip);
        dosen.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/dosens";
    }
    
    void DosenController.populateEditForm(Model uiModel, Dosen dosen) {
        uiModel.addAttribute("dosen", dosen);
        uiModel.addAttribute("departemens", Departemen.findAllDepartemens());
        uiModel.addAttribute("pegawais", Pegawai.findAllPegawais());
    }
    
    String DosenController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
